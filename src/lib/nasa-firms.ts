import axios from 'axios'
import { FireDetection } from '@/types/fire'
import { NASA_FIRMS_ENDPOINTS } from './constants'

interface NASAFIRMSRecord {
  latitude: number
  longitude: number
  brightness: number
  scan: number
  track: number
  acq_date: string
  acq_time: string
  satellite: string
  instrument: string
  confidence: number
  version: string
  bright_t31: number
  frp: number
  daynight: string
  type: number
}

export class NASAFIRMSClient {
  private apiKey: string

  constructor(apiKey: string) {
    this.apiKey = apiKey
  }

  async fetchFireData(
    source: 'MODIS_NRT' | 'VIIRS_SNPP_NRT' | 'VIIRS_NOAA20_NRT',
    area: string,
    date: string
  ): Promise<FireDetection[]> {
    try {
      let endpoint: string
      let fireSource: string

      switch (source) {
        case 'MODIS_NRT':
          endpoint = NASA_FIRMS_ENDPOINTS.MODIS_NRT
          fireSource = 'MODIS'
          break
        case 'VIIRS_SNPP_NRT':
        case 'VIIRS_NOAA20_NRT':
          endpoint = source === 'VIIRS_SNPP_NRT' 
            ? NASA_FIRMS_ENDPOINTS.VIIRS_NRT 
            : NASA_FIRMS_ENDPOINTS.VIIRS_NOAA20
          fireSource = 'VIIRS'
          break
        default:
          throw new Error(`Unsupported source: ${source}`)
      }

      const url = endpoint
        .replace('{API_KEY}', this.apiKey)
        .replace('{area}', area)
        .replace('{date}', date)

      const response = await axios.get(url, {
        timeout: 30000,
        headers: {
          'User-Agent': 'Stubble-Burning-Detection-System/1.0'
        }
      })

      return this.parseCSVData(response.data, fireSource)
    } catch (error) {
      console.error(`Error fetching ${source} data:`, error)
      throw error
    }
  }

  private parseCSVData(csvData: string, source: string): FireDetection[] {
    const lines = csvData.trim().split('\n')
    if (lines.length <= 1) return []

    const headers = lines[0].split(',')
    const fires: FireDetection[] = []

    for (let i = 1; i < lines.length; i++) {
      const values = lines[i].split(',')
      if (values.length < headers.length) continue

      try {
        const fire: FireDetection = {
          id: '', // Will be generated by database
          latitude: parseFloat(values[0]),
          longitude: parseFloat(values[1]),
          brightness: parseFloat(values[2]),
          scan: parseFloat(values[3]),
          track: parseFloat(values[4]),
          acq_date: values[5],
          acq_time: values[6],
          satellite: values[7],
          instrument: values[8],
          confidence: parseFloat(values[9]),
          version: values[10],
          bright_t31: parseFloat(values[11]),
          frp: parseFloat(values[12]),
          daynight: values[13] as 'D' | 'N',
          type: parseInt(values[14]),
          source,
          created_at: new Date(),
          updated_at: new Date()
        }

        // Validate coordinates
        if (fire.latitude >= -90 && fire.latitude <= 90 && 
            fire.longitude >= -180 && fire.longitude <= 180) {
          fires.push(fire)
        }
      } catch (error) {
        console.warn(`Error parsing fire record at line ${i + 1}:`, error)
        continue
      }
    }

    return fires
  }

  async fetchAllSources(area: string, date: string): Promise<FireDetection[]> {
    const sources: ('MODIS_NRT' | 'VIIRS_SNPP_NRT' | 'VIIRS_NOAA20_NRT')[] = [
      'MODIS_NRT',
      'VIIRS_SNPP_NRT',
      'VIIRS_NOAA20_NRT'
    ]

    const promises = sources.map(source => 
      this.fetchFireData(source, area, date).catch(error => {
        console.warn(`Failed to fetch ${source} data:`, error)
        return []
      })
    )

    const results = await Promise.all(promises)
    return results.flat()
  }
}

export function formatAreaString(bounds: { north: number; south: number; east: number; west: number }): string {
  return `${bounds.west},${bounds.south},${bounds.east},${bounds.north}`
}

export function formatDateString(date: Date): string {
  const year = date.getFullYear()
  const month = (date.getMonth() + 1).toString().padStart(2, '0')
  const day = date.getDate().toString().padStart(2, '0')
  return `${year}-${month}-${day}`
}